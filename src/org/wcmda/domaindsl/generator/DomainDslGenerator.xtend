/*
 * generated by Xtext 2.12.0
 */
package org.wcmda.domaindsl.generator

import javax.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.wcmda.domaindsl.domainDsl.Entity
import org.wcmda.domaindsl.domainDsl.Feature

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DomainDslGenerator extends AbstractGenerator {

	@Inject extension IQualifiedNameProvider

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : resource.allContents.toIterable.filter(Entity)) {
			fsa.generateFile(e.fullyQualifiedName.toString("/") + ".java", e.compile)
		}
	}

	def compile(Entity e) ''' 
		«IF e.eContainer.fullyQualifiedName !== null»
			package «e.eContainer.fullyQualifiedName»;
		«ENDIF»
		    
		public class «e.name» «IF e.superType !== null
            »extends «e.superType.fullyQualifiedName» «ENDIF»{
		    «FOR f : e.features»
		    	«f.compile»
		    «ENDFOR»
		}
	'''

	def compile(Feature f) '''
		private «f.type.fullyQualifiedName» «f.name» «IF f.defaultVal != '' »= «f.defaultVal»  «ENDIF»  «IF f.many» =  new java.util.List<>();  «ELSE»«f.name» «ENDIF»;
		    
		«FOR v : f.valdiators»
		  	//«v.name» =  «IF v.svalue != '' »  '«v.svalue»' «ELSE»'' «ENDIF»  «IF v.value > 0 »  «v.value» «ENDIF»
	    «ENDFOR»
		public «f.type.fullyQualifiedName» get«f.name.toFirstUpper»() {
		    return «f.name»;
		}
		    
		    
		public void set«f.name.toFirstUpper»(«f.type.fullyQualifiedName» «f.name») {
		    this.«f.name» = «f.name»;
		}
	'''
}
